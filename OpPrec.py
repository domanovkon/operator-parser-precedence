relation_table = {
    "a": {
        "a": '0', "+": '>', "-": '>', "**": '>', "*": '>', "/": '>', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '>', "(": '0', ")": '>', "$": '>'
    },
    "+": {
        "a": '<', "+": '>', "-": '>', "**": '<', "*": '<', "/": '<', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    "-": {
        "a": '<', "+": '>', "-": '>', "**": '<', "*": '<', "/": '>', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    "**": {
        "a": '<', "+": '>', "-": '>', "**": '>', "*": '>', "/": '>', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    "*": {
        "a": '<', "+": '>', "-": '>', "**": '<', "*": '>', "/": '>', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    "/": {
        "a": '<', "+": '>', "-": '>', "**": '<', "*": '>', "/": '>', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    "<": {
        "a": '<', "+": '<', "-": '<', "**": '<', "*": '<', "/": '<', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    ">": {
        "a": '<', "+": '<', "-": '<', "**": '<', "*": '<', "/": '<', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    "and": {
        "a": '<', "+": '<', "-": '<', "**": '<', "*": '<', "/": '<', "<": '<', ">": '<', "and": '>', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    "or": {
        "a": '<', "+": '<', "-": '<', "**": '<', "*": '<', "/": '<', "<": '<', ">": '<', "and": '<', "or": '>',"<=>": '<', "(": '<', ")": '>', "$": '>'
    },
    "<=>": {
        "a": '<', "+": '>', "-": '>', "**": '>', "*": '>', "/": '>', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '>', "(": '<', ")": '>', "$": '>'
    },
    "(": {
        "a": '<', "+": '<', "-": '<', "**": '<', "*": '<', "/": '<', "<": '<', ">": '<', "and": '<', "or": '<',"<=>": '<', "(": '<', ")": '=', "$": '0'
    },
    ")": {
        "a": '0', "+": '>', "-": '>', "**": '>', "*": '>', "/": '>', "<": '>', ">": '>', "and": '>', "or": '>',"<=>": '>', "(": '0', ")": '>', "$": '>'
    },
    "$": {
        "a": '<', "+": '<', "-": '<', "**": '<', "*": '<', "/": '<', "<": '<', ">": '<', "and": '<', "or": '<',"<=>": '<', "(": '<', ")": '0', "$": '1'
    }
}

stack = ['$']
reverse_polish_notation = []


def parser(input_string):
    for i in range(0, input_string.__len__()):
        if i == input_string.__len__() - 1:
            break
        if input_string[i] in ('+', '-', '*', '/', '**', '<', '>', 'and', 'or', '<=>') and input_string[i + 1] in (
                '+', '-', '*', '/', '**', '<', '>', 'and', 'or', '<=>'):
            print('Операторная грамматика G называется грамматикой операторного предшествования,\nесли между любыми '
                  'двумя терминальными символами выполняется не более одного\nотношения операторного предшествования!')
            exit()
    i = 0
    is_error = False
    while stack.__len__() > 1 or input_string[i] != '$':
        if relation_table[stack[-1]][input_string[i]] in ('=', '<'):
            # Перенос
            stack.append(input_string[i])
            i = i + 1
        elif relation_table[stack[-1]][input_string[i]] == '>':
            # Свертка
            while True:
                term = stack.pop()
                if term not in ('(', ')'):
                    reverse_polish_notation.append(term)
                if relation_table[stack[-1]][term] == '<':
                    break
        elif relation_table[stack[-1]][input_string[i]] == '0':
            print('Недопустимая последовательность символов')
            exit()

    out = ' '.join([str(item) for item in reverse_polish_notation])
    if not is_error:
        print('Результат')
        print(out)


if __name__ == "__main__":
    # input_string = '( a + a ) * a'
    input_string = '( a + a ) <=> a * a'
    # input_string = '( a + a ) * a ** ( a + a )'
    # input_string = 'a < ( a + a ) * a ** ( a + a )'
    # input_string = '( a / a - a ) and ( a + a ) < a * a ** a'
    # input_string = '( a / a - a ) + ( a + a ) - a * a ** a'
    # input_string = ' ( a + ( a ) ** ( a / a ) ) '
    # input_string = ' a + a'
    print('Инфиксное выражение')
    print(input_string)
    input_string = input_string + ' $'
    input_string = list(input_string.strip().split())
    parser(input_string)
